Solution to Problem 1:

(a)

* The use of `pi` at line 4 is bound at which line?
  Line 3, because the declaration of `pi` is in scope on
  that line and shadows the declaration on line 1.

* The use of `pi` at line 7 is bound at which line?
  Line 1, because the declaration of `pi` on
  that line is the only one that is in scope on line 7.

(b)

* The use of `x` at line 3 is bound at which line?
  Line 2, because the formal parameter `x` of `f`
  shadows the outer declaration of `x` on line 1.
  
* The use of `x` at line 6 is bound at which line?
  Line 5, because the occurrence of `x` in the match
  alternative on that line binds `x` to the matched value in
  the right-hand side of the match alternative. 
  The earlier bindings of `x` on lines 2 and 3 are shadowed
  by this new binding.
  
* The use of `x` at line 10 is bound at which line?
  Line 5, for the same reason as the previous example. Note that the
  declaration of `x` on line 8 is no longer in scope on line 10.
  
* The use of `x` at line 13 is bound at which line?
  Line 1, because the declaration of `x` on that
  line is the only declaration of `x` that is in scope on line 13.


Solution to Problem 2:

The body of g is well-typed.

if (x == 0) (b, 1) else (b, a + 2) : ((Int, Int), Int) because
  x == 0 : Boolean because
    x : Int
    0 : Int
    _ == _ : (Int, Int) => Boolean
  (b, a + 2) : ((Int, Int), Int) because
    b : (Int, Int) because
      b = (x, 3)
      (x, 3) : (Int, Int) because
        x : Int
        3 : Int
      a + 2 : Int because
      a : Int because
        1 : Int
        2 : Int
        _ + _ : (Int, Int) => Int
  (b, 1) : ((Int, Int), Int) because
    b : (Int, Int) because
      b = (1, 3)
      (x, 3) : (Int, Int) because
        x : Int
        3 : Int
      1 : Int


Solution to Problem 3.(d).ii:

Yes, the implementation is tail-recursive. The recursion is implemented by the function `sqrtLoop`. There is only one recursive call in `sqrtLoop` and this call is in tail position.

